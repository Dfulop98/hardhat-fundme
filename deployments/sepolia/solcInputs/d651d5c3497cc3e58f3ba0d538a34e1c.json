{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "//SPDX-License-Identifier: MIT\n\n//Pragma\npragma solidity ^0.8.8;\n\n//Imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error codes\nerror FundMe__NotOwner();\n\n// Interfaces, Libraries, Contracts\n\n/** @title A contract for crowd funding\n * @author Fülöp Dobó\n * @notice This contract is to demo a sample funding contract\n * @dev This contract price feeds as our library\n */\ncontract FundMe {\n    // type declarations\n    using PriceConverter for uint256;\n    \n    //State variables\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n    address private immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    AggregatorV3Interface private s_priceFeed;\n\n    //Modifiers\n    modifier onlyOwner {\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        if(msg.sender != i_owner) { revert FundMe__NotOwner(); }\n        _;\n    }\n\n    /*\n     Functions order:\n     constructor\n     receive\n     fallback\n     external\n     public\n     internal\n     private\n     view / pure\n     */\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n    \n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function is used to fund the contract\n     * @dev Push funders to the dictionary\n     */\n    function fund() public payable{\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n             \"Didn't send enough!\"\n        );\n\n        s_addressToAmountFunded[msg.sender] +=  msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public payable onlyOwner{\n        for(\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success,) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");        \n        require(success, \"Transfer failed!\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner{\n        address[] memory funders = s_funders;\n        // mappings cant be in memory!\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }   \n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n    \n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address fundingAddress) \n        public \n        view \n        returns (uint256)\n    {\n        return s_addressToAmountFunded[fundingAddress];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-Licence-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n     function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        // ABI\r\n        // Address of the contract: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n\r\n        (,int256 price,,,) = priceFeed.latestRoundData();\r\n        // ETH in terms of USD\r\n        // 3000.0000000\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount, AggregatorV3Interface priceFeed\r\n        ) internal  view returns(uint256){\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
